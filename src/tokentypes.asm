.globl isdigit isspace isvarstart isvarname isoperator isparen isend
.include "macros.h"
.include "params.h"
.include "chars.h"
.data

# bit maps created with python script
_isdigit_bm: .byte 0x0 0x0 0x0 0x0 0x0 0x0 0xff 0x3 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0
_isspace_bm: .byte 0x0 0x3e 0x0 0x0 0x1 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0
_isvarstart_bm: .byte 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0xfe 0xff 0xff 0x87 0xfe 0xff 0xff 0x7
_isvarname_bm: .byte 0x0 0x0 0x0 0x0 0x0 0x0 0xff 0x3 0xfe 0xff 0xff 0x87 0xfe 0xff 0xff 0x7
_isop_bm: .byte 0x0 0x0 0x0 0x0 0x0 0xac 0x0 0x20 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0

.text

.macro bit_array_extract(%array)
	srl $t0, $a0, 3
	lb $t0, %array($t0)
	andi $t1, $a0, 7
	srlv $t0, $t0, $t1
	andi $v0, $t0, 1
.end_macro

isdigit:
	bit_array_extract(_isdigit_bm)
	jr $ra

isspace:
	bit_array_extract(_isspace_bm)
	jr $ra

isvarstart:
	bit_array_extract(_isvarstart_bm)
	jr $ra

isvarname:
	bit_array_extract(_isvarname_bm)
	jr $ra
	
isend:
	seq $t0, $a0, CHR_NUL
	seq $v0, $a0, CHR_NL
	or $v0, $v0, $t0
	jr $ra
	
isparen:
	seq $t0, $a0, CHR_LPAR
	seq $v0, $a0, CHR_RPAR
	or $v0, $v0, $t0
	jr $ra
	
isoperator:
	bit_array_extract(_isop_bm)
	jr $ra
